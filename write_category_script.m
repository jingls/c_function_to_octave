## Copyright (C) 2021 Tallis Huther da Costa <tallis.hcosta@gmail.com>
## 
## This program is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see
## <https://www.gnu.org/licenses/>.

## -*- texinfo -*- 
## @deftypefn {} {} write_category_script (@var{prototype_info}, @var{file_out}, @var{cc_file}, @var{cc_header_file}, @var{cc_extra_file}, @var{category}, @var{category_name})
## 
## Write a shell script @var{file_out} that contains C source code for all C
## function prototypes given in @var{prototype_info}.
## 
## The shell script @var{file_out} needs to be called afterwards, at which time
## it will create the C file @var{cc_file}.
## 
## @var{prototype_info}: struct returned by @code{extract_prototype_info_from_h_file}.
## 
## @var{file_out}: file path for the target shell script.
## 
## @var{cc_file}: file path for the C file that will be created by the shell
## script @var{file_out}.
## 
## @var{cc_header_file}: a file containing C source code that will be copied to 
## the beginning of the C file @var{cc_file}.
## 
## @var{cc_extra_file}: a file containing C source code that will be copied to 
## the end of the C file @var{cc_file}.
##
## @var{category}: a descriptor of the category name that doesn't contain white
## spaces.
##
## @var{category_name}: the name of the category in which the C functions will
## belong to.
##
## @seealso{extract_prototype_info_from_h_file}
## @end deftypefn

function write_category_script (prototype_info, file_out, cc_file, cc_header_file, cc_extra_file, category, category_name)
  
  fid_out = fopen (file_out, "w");
  
  str_out = ["\
## --- DO NOT EDIT! --- Generated by write_category_script.m\n\
##\n\
## This program is free software; you can redistribute it and/or modify\n\
## it under the terms of the GNU General Public License as published by\n\
## the Free Software Foundation; either version 2 of the License, or\n\
## (at your option) any later version.\n\
##\n\
## This program is distributed in the hope that it will be useful,\n\
## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
## GNU General Public License for more details.\n\
##\n\
## You should have received a copy of the GNU General Public License\n\
## along with this program; if not, see <http://www.gnu.org/licenses/>.\n\
\n\
RT=\"./replace_template.sh\"\n\
\n\
cp " cc_header_file " " cc_file "\n\
\n\
## The word below is a keyword needed by bootstrap: it is a short\n\
## description of the category of functions contained in this file,\n\
## which relates to the category in which they will appear.\n\
## This category goes into the html documentation of the package.\n\
## CATEGORY: " category_name " ######################################\n\
\n\
# used by replace_template.sh to determine the oct file that this\n\
# function belongs to.\n\
export category=" category "\n\n"];

  fputs (fid_out, str_out);
  
  for i = 1 : numel(prototype_info)
    function_name = prototype_info(i).function_name;
    func_doc = ["\n" prototype_info(i).documentation "\n"];
    template_filename = build_template_filename (prototype_info (i));
    str_out = ["\n\n\
export octave_name=" function_name "\n\
export    funcname=" function_name "\n\
cat << \\EOF > docstring.txt\n\
" func_doc "\n\
EOF\n\
${RT} " template_filename " >> " cc_file];

    fputs(fid_out, str_out);
  endfor
  
    str_out = ["\n\n\
touch " cc_extra_file "\n\
cat " cc_extra_file " >> " cc_file "\n"];

  fputs(fid_out, str_out);
  
  fclose(fid_out);
  [status, output] = system (["chmod +x \"" file_out "\""]);
endfunction
